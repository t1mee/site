extends components/layout.pug

append vars
	- title = "PiKVM - Open and inexpensive DIY IP-KVM on Raspberry Pi"


block body
	main.content
		include components/main/banner.pug

		include components/main/videos.pug

		include components/main/products.pug

		include components/main/params.pug

		

		//- 	table
		//- 		tr
		//- 			td(rowspan="2" class="text-left")
		//- 				| We also made our own
		//- 				| #[b ready-made PiKVM V3 on Raspberry Pi 4].#[br]
		//- 				| #[b #[a(target="_blank" href="https://youtu.be/dTchVKxx7Fo") Watch the video!]]#[br]
		//- 				| This device has all the features of the DIY version, including:
		//- 				ul
		//- 					li
		//- 						| #[b HDMI Full HD] capture based on the TC358743 chip
		//- 						| (#[b extra low latency ~100ms] and many features like #[b compression control]).
		//- 					li OTG #[b Keyboard] & #[b mouse]; #[b Mass Storage Drive] emulation.
		//- 					li Ability to #[b simulate "removal and insertion" for USB].
		//- 					li Onboard #[b ATX power control].
		//- 					li Onboard #[b fan controller].
		//- 					li #[b A real-time clock].
		//- 					li #[b RJ-45 and USB serial console port] (to manage PiKVM OS or to connect with the server).
		//- 					li
		//- 						| #[b No need for soldering or breadboarding.] It's a pre-assembled, reliable device
		//- 						| which you can use yourself or provide to your clients.
		//- 					li Continued use of PiKVM OS - #[b all the software is fully open].
		//- 			td #[+img("v3-preasm.jpg", 300)]
		//- 		tr
		//- 			td #[+img("v3-board-2.jpg", 300)]
		//- 	br
		//- 	a(href="/buy" class="clickable")
		//- 		div Buy PiKVM V3 right now!
		//- 	table
		//- 		tr
		//- 			td(colspan="4")
		//- 				| #[b Great project review by Novaspirit Tech: #[a(target="_blank" href="https://youtu.be/plP9Y1likRg") YouTube]]#[br]
		//- 				| Boring technical details from us: #[a(target="_blank" href="https://youtu.be/9YhPWjWv5gw") YouTube]#[br]
		//- 				| And here some examples from us and our happy users.
		//- 		//tr
		//- 			each index in [1, 2, 3, 4]
		//- 				td #[+img(`diy-${index}.jpg`, 200)]
		//- 	hr
		//- 	table
		//- 		tr
		//- 			td #[b Easy and powerful]
		//- 			td #[b The widest hardware support]
		//- 			td #[b Production features]
		//- 		tr
		//- 			td
		//- 				| Just a few cheap parts and half an hour of assembly and you will have the device
		//- 				| that supports #[b Full HD] video, #[b Mass Storage Drive], #[b keyboard] & #[b mouse], control the #[b ATX power]
		//- 				| and much more.
		//- 			td
		//- 				| There are many ways to build a PiKVM. #[b Raspberry Pi] models #[b 2, 3, 4, or ZeroW] may be used.
		//- 				| Video capture devices can be attached using the #[b CSI-2] or #[b USB] interfaces.
		//- 			td
		//- 				| Access via #[b Web UI] and #[b VNC], #[b IPMI BMC/SoL] and #[b Redfish] support,
		//- 				| #[b Wake-on-LAN] server, advanced #[b authorization] and #[b HTTPS] out of the box.
		//- 				| This is just a short list of what PiKVM can do out of the box.
		//- 	a(target="_blank" href=`${github_link}#diy-getting-started` class="clickable")
		//- 		div DIY Getting Started

		//- div(class="block")
		//- 	h2 Fully-featured and modern IP-KVM
		//- 	div(class="text-left")
		//- 		ul
		//- 			+li("Easy to build")
		//- 				| A ready-to-use OS images and friendly build environment. The hardware can be made in half an hour and without soldering.
		//- 			+li("Very low video latency")
		//- 				| ~100 milliseconds of video latency. This is the smallest delay of all existing solutions.
		//- 			+li("Extra lightweight Web UI and VNC")
		//- 				| No weird proprietary clients. No ugly applets. Just use your favorite browser to connect to the PiKVM.
		//- 				| No flash plugins either! Ah, and VNC is also supported.
		//- 			+li("Keyboard & mouse")
		//- 				| Mouse usage works directly in the browser. The keyboard emulator supports displaying the state of the keyboard LEDs.
		//- 			+li("Mass Storage Drive")
		//- 				| On the Raspberry Pi 4 and ZeroW, PiKVM can emulate a virtual CD-ROM or Flash Drive.
		//- 				| A live image can be uploaded to boot the attached server.
		//- 			+li("ATX power management")
		//- 				| With a very simple circuit that can be assembled on a breadboard, the power button of the attached server
		//- 				| can be controlled using the ATX button headers on the motherboard.
		//- 			+li("Security")
		//- 				| PiKVM can be opened to the Internet and no one will get access without the authorization.
		//- 				| SSL is used to protect traffic from being intercepted by third parties.
		//- 			+li("Local monitoring")
		//- 				| PiKVM monitors the health of the Raspberry Pi board and will warn you if it's too hot
		//- 				| or is not receiving enough power.
		//- 			+li("GPIO management")
		//- 				| You can control GPIO and USB relays via the web interface.
		//- 				| The extensible interface allows you to make anything out of it.

		//- div(class="block")
		//- 	h2 Production-ready
		//- 	div(class="text-left")
		//- 		ul
		//- 			+li("Linux-based embedded OS")
		//- 				| The PiKVM OS is based on  
		//- 				| #[a(href="https://archlinuxarm.org" target="_blank") Arch Linux ARM]  
		//- 				| and can be customized for any needs. Thousands of pre-built binary packages are at your service
		//- 				| and can be updated with a single command!
		//- 			+li("Read-only filesystem")
		//- 				| By default the OS runs in read-only mode, as an embedded system should. This prevents damage
		//- 				| to the memory card due to a sudden power outage.
		//- 			+li("VNC server")
		//- 				| The managed server and its BIOS can be accessed using a regular VNC client which supports JPEG compression.
		//- 			+li("IPMI BMC/SoL and Redfish")
		//- 				| Use #[i ipmitool], #[i ipmiutil] or any existing network infrastructure that supports IPMI
		//- 				| to manage the server's power and access to serial port via LAN. Redfish and #[i redfishtool] supported too.
		//- 			+li("Wake-on-LAN")
		//- 				| PiKVM can be configured to power up a managed server using WoL. This will be available in the Web menu.
		//- 			+li("Extensible authorization methods")
		//- 				| Multiple PiKVMs can be configured to use a common authorization service.
		//- 				| PAM and its rich authorization mechanisms can also be used to integrate PiKVM into your existing
		//- 				| authentication infrastructure.
		//- 			+li("Macro scripts")
		//- 				| If repetitive actions must be performed on the attached server (or on several different servers),
		//- 				| a macro can be recorded with keyboard & mouse actions and can be played back multiple times.

		//- div(class="block")
		//- 	h2 Open Source
		//- 	div(class="text-left")
		//- 		ul
		//- 			+li("Open & free")
		//- 				| PiKVM is Free and Open Source Software #[a(target="_blank" href="https://github.com/pikvm") released under the GPLv3].
		//- 			+li("Community & support")
		//- 				| PiKVM has a large community. Join the #[a(target="_blank" href=discord_link) Discord chat]
		//- 				| if you have any questions.
		//- 			+li("Extensible")
		//- 				| PiKVM was designed as a set of microservices with a plug-in architecture. It's very easy to modify and maintain.
		//- 			+li("Comprehensive API")
		//- 				| Everything that can be done via the user interface can also be done via a powerful HTTP API.
		//- 			+li("Know-how")
		//- 				| We created our very own #[a(target="_blank" href="https://github.com/pikvm/ustreamer") MJPG video server]
		//- 				|  written in C with multi-threading support and GPU video encoding - the fastest streaming solution available
		//- 				| to provide the best video quality for PiKVM. We also tested a lot of hardware configurations
		//- 				|  so that you can be sure devices you assemble will work reliably.

		//- div(class="block")
		//- 	div(class="text-left")
		//- 		table
		//- 			tr
		//- 				td
		//- 					a(href="/buy" class="clickable")
		//- 						div Buy PiKVM V3 right now!
		//- 				td
		//- 					a(target="_blank" href=`${github_link}#diy-getting-started` class="clickable")
		//- 						div DIY Getting Started
